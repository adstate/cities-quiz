{"version":3,"sources":["services/googleMapService.ts","components/Header/Header.tsx","components/Map/Map.tsx","actions/index.ts","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","services/cityService.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["googleMapService","map","markers","initMap","selector","onPlace","mapOptions","zoom","center","google","maps","LatLng","disableDefaultUI","zoomControl","zoomControlOptions","position","ControlPosition","LEFT_BOTTOM","styles","mapElement","document","querySelector","this","Map","addListener","e","placeMarker","latLng","length","title","marker","Marker","label","push","showCity","city","lat","long","capitalCity","computeDistanceBetween","markerA","markerB","latLngA","latLngB","Math","round","geometry","spherical","clearMarkers","forEach","m","setMap","Header","score","useSelector","state","citiesPlaced","currentCity","currentDistance","gameStarted","console","log","className","Number","mapService","currentMarker","dispatch","useDispatch","onSelectPlace","type","payload","lng","useEffect","id","Footer","genNextCity","disabled","onClick","App","Boolean","window","location","hostname","match","cityService","parse","data","initialState","capitalCities","citiesData","calcDistance","pointA","pointB","distance","rootReducer","action","shift","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b868814.chunk.js","sourcesContent":["import City from \"../models/city\";\r\n\r\nexport interface Coordinates {\r\n    lat: number,\r\n    long: number\r\n}\r\n\r\nexport interface MapService {\r\n    map: google.maps.Map | null;\r\n    markers: google.maps.Marker[];\r\n    initMap: (selector: string, onPlace: (latLang: google.maps.LatLng) => void) => void;\r\n    placeMarker: (latLng: google.maps.LatLng, title?: string) => void;\r\n    clearMarkers: () => void;\r\n    showCity: (city: City) => void;\r\n    computeDistanceBetween: (markerA: Coordinates, markerB: Coordinates) => number;\r\n}\r\n\r\nconst googleMapService: MapService = {\r\n    map: null,\r\n    markers: [],\r\n\r\n    initMap(selector: string, onPlace) {\r\n        const mapOptions = {\r\n            zoom: 4,\r\n            center: new google.maps.LatLng(47.3686498, 8.5391825),\r\n            disableDefaultUI: true,\r\n            zoomControl: true,\r\n            zoomControlOptions: {\r\n                position: google.maps.ControlPosition.LEFT_BOTTOM\r\n            },\r\n            styles: [{\"featureType\":\"administrative\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"on\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry\",\"stylers\":[{\"visibility\":\"on\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"visibility\":\"on\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"visibility\":\"on\"}]},{\"featureType\":\"administrative\",\"elementType\":\"labels\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative\",\"elementType\":\"labels.text\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#444444\"},{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.country\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"saturation\":\"-47\"},{\"gamma\":\"0.00\"},{\"weight\":\"0.72\"}]},{\"featureType\":\"administrative.province\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.province\",\"elementType\":\"geometry\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.province\",\"elementType\":\"labels\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.locality\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.neighborhood\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.land_parcel\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative.land_parcel\",\"elementType\":\"geometry\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"all\",\"stylers\":[{\"color\":\"#f2f2f2\"},{\"visibility\":\"simplified\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"labels\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"labels.text\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"off\"},{\"saturation\":\"17\"},{\"gamma\":\"6.34\"}]},{\"featureType\":\"landscape\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape.natural.landcover\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"landscape.natural.terrain\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"poi\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"road\",\"elementType\":\"all\",\"stylers\":[{\"saturation\":-100},{\"lightness\":45},{\"visibility\":\"off\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"road.arterial\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"transit\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"water\",\"elementType\":\"all\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#3a6a7d\"}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"visibility\":\"on\"},{\"saturation\":\"-50\"},{\"lightness\":\"-22\"},{\"gamma\":\"0.94\"},{\"weight\":\"0.58\"},{\"hue\":\"#00e3ff\"}]},{\"featureType\":\"water\",\"elementType\":\"labels\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"water\",\"elementType\":\"labels.text\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"water\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]}]\r\n        } as google.maps.MapOptions;\r\n\r\n        const mapElement: Element | null = document.querySelector(selector);\r\n\r\n        if (!mapElement) {\r\n            return;\r\n        }\r\n\r\n        this.map = new google.maps.Map(mapElement, mapOptions);\r\n\r\n        this.map.addListener('click', (e: any) => {\r\n            this.placeMarker(e.latLng);\r\n\r\n            if (this.markers.length === 1) {\r\n                onPlace(e.latLng);\r\n            }\r\n        });\r\n    },\r\n\r\n    placeMarker(latLng: google.maps.LatLng, title: string = '') {\r\n        if (!this.map || this.markers.length >= 2) {\r\n            return;\r\n        }\r\n\r\n        const marker = new google.maps.Marker({\r\n            position: latLng,\r\n            map: this.map,\r\n            title: title,\r\n            label: title\r\n        });\r\n\r\n        this.markers.push(marker);\r\n    },\r\n\r\n    showCity(city: City) {\r\n        this.placeMarker(new google.maps.LatLng(city.lat, city.long), city.capitalCity);\r\n    },\r\n\r\n    computeDistanceBetween(markerA, markerB) {\r\n        const latLngA = new google.maps.LatLng(markerA.lat, markerA.long);\r\n        const latLngB = new google.maps.LatLng(markerB.lat, markerB.long);\r\n\r\n        return Math.round(google.maps.geometry.spherical.computeDistanceBetween(latLngA, latLngB) / 1000);\r\n    },\r\n\r\n    clearMarkers() {\r\n        this.markers.forEach(m => m.setMap(null));\r\n        this.markers = [];\r\n    }\r\n};\r\n\r\nexport default googleMapService;","import React from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { RootState } from '../../reducers'\r\nimport './Header.css';\r\n\r\nconst Header: React.FC<any> = ({}) => {\r\n    const score = useSelector((state: RootState) => state.score);\r\n    const citiesPlaced = useSelector((state: RootState) => state.citiesPlaced);\r\n    const currentCity = useSelector((state: RootState) => state.currentCity);\r\n    const currentDistance = useSelector((state: RootState) => state.currentDistance);\r\n    const gameStarted = useSelector((state: RootState) => state.gameStarted);\r\n\r\n    console.log('gameStarted', gameStarted);\r\n\r\n    if (gameStarted) {\r\n        return (\r\n            <div className=\"header\">\r\n                <div className=\"button\">{score} kilometers left</div>\r\n                <div className=\"button\">{citiesPlaced} cities placed</div>\r\n                { currentCity && score > 0 && Number(currentDistance) === 0 && <div className=\"current-place\">Select the location of {currentCity.capitalCity}</div> }\r\n                { currentCity && Number(currentDistance) > 0 && <div className=\"current-place\">Distance between point and {currentCity.capitalCity} is {currentDistance} km</div> }\r\n                { score === 0 && <div className=\"current-place\"> Game ended. You lost all kilometers. You can start again.</div> }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"button\">{score} kilometers left</div>\r\n            <div className=\"button\">{citiesPlaced} cities placed</div>\r\n            {score === 0 && <div className=\"current-place\"> Game ended. You lost all kilometers. You can start again.</div> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport './Map.css';\r\nimport {RootState} from \"../../reducers\";\r\nimport {placeMarker} from '../../actions'\r\nimport {MapService} from '../../services/googleMapService';\r\n\r\n\r\ninterface MapProps {\r\n    mapService: MapService;\r\n}\r\n\r\nconst Map: React.FC<MapProps> = ({mapService}) =>  {\r\n    const currentCity = useSelector((state: RootState) => state.currentCity);\r\n    const currentMarker = useSelector((state: RootState) => state.currentMarker);\r\n    const gameStarted = useSelector((state: RootState) => state.gameStarted);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onSelectPlace = (latLng: google.maps.LatLng) => {\r\n        dispatch(placeMarker({lat: latLng.lat(), long: latLng.lng()}));\r\n    }\r\n\r\n\r\n    if (currentMarker && currentCity) {\r\n        mapService.showCity(currentCity);\r\n    } else {\r\n        mapService.clearMarkers();\r\n    }\r\n\r\n    useEffect(() => {\r\n        mapService.initMap('#map', onSelectPlace);\r\n    }, []);\r\n\r\n    if (!gameStarted) {\r\n        return (\r\n            <div id=\"map\" className=\"citiesMap citiesMap_disabled\"></div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div id=\"map\" className=\"citiesMap\"></div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","export const NEXT_CITY = 'NEXT_CITY';\r\nexport const PLACE_MARKER = 'PLACE_MARKER';\r\nexport const ADJUST_SCORE = 'ADJUST_SCORE';\r\nexport const START_GAME = 'START_GAME';\r\nexport const END_GAME = 'END_GAME';\r\n\r\nexport const nextCity = () => ({\r\n    type: NEXT_CITY\r\n});\r\n\r\nexport const placeMarker = (coordinates: {lat: number, long: number}) => ({\r\n    type: PLACE_MARKER,\r\n    payload: coordinates\r\n});\r\n\r\nexport const adjustScore = (distance: number) => ({\r\n    type: ADJUST_SCORE,\r\n    payload: distance\r\n});\r\n\r\nexport const startGame = () => ({\r\n    type: START_GAME\r\n});\r\n\r\nexport const endGame = () => ({\r\n   type: END_GAME\r\n});\r\n","import React, {useCallback} from \"react\";\r\nimport {nextCity, startGame} from '../../actions'\r\nimport {useSelector} from 'react-redux';\r\nimport './Footer.css';\r\nimport {RootState} from \"../../reducers\";\r\n\r\ninterface FooterProps {\r\n    dispatch: React.Dispatch<any>,\r\n    mapService?: any\r\n}\r\n\r\nconst Footer: React.FC<FooterProps> = ({dispatch}) => {\r\n    const gameStarted = useSelector((state: RootState) => state.gameStarted);\r\n    const currentCity = useSelector((state: RootState) => state.currentCity);\r\n    const currentMarker = useSelector((state: RootState) => state.currentMarker);\r\n\r\n\r\n    const genNextCity = () => {\r\n        dispatch(nextCity());\r\n    }\r\n\r\n    const start = () => {\r\n        dispatch(startGame());\r\n        genNextCity();\r\n    }\r\n\r\n    return (\r\n      <div className=\"footer\">\r\n          { gameStarted && <button className=\"button button_active\" disabled={!currentMarker} onClick={genNextCity}>Place</button>}\r\n          { !gameStarted && <button className=\"button button_active\" onClick={start}>Start</button>}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport googleMapService from './services/googleMapService';\nimport './App.css';\n\nimport Header from './components/Header/Header';\nimport Map from './components/Map/Map';\nimport Footer from './components/Footer/Footer';\nimport {useDispatch} from \"react-redux\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  return (\n      <div className=\"app__container\">\n        <Header/>\n        <Map mapService={googleMapService} />\n        <Footer dispatch={dispatch}/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import data from '../data/capitalCities.json';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\ninterface CityData {\r\n    capitalCity: string,\r\n    lat: string,\r\n    long: string\r\n}\r\n\r\nconst cityService = {\r\n    parse(data: CityData[]) {\r\n        return data.map((city: CityData) => ({\r\n            capitalCity: city.capitalCity,\r\n            lat: Number(city.lat),\r\n            long: Number(city.long)\r\n        }));\r\n    }\r\n}\r\n\r\nexport default cityService;\r\n","import City from '../models/city';\r\nimport citiesData from '../data/capitalCities.json';\r\nimport cityService from \"../services/cityService\";\r\nimport googleMapService, {Coordinates} from \"../services/googleMapService\";\r\nimport {NEXT_CITY, PLACE_MARKER, START_GAME, END_GAME} from '../actions';\r\n\r\ninterface State {\r\n    capitalCities: City[];\r\n    currentCity: City | null | undefined,\r\n    currentMarker: any,\r\n    currentDistance: number | null,\r\n    score: number;\r\n    citiesPlaced: number;\r\n    gameStarted: boolean;\r\n}\r\n\r\nconst initialState: State = {\r\n    capitalCities: cityService.parse(citiesData.capitalCities),\r\n    currentCity: null,\r\n    currentMarker: null,\r\n    currentDistance: 0,\r\n    score: 1500,\r\n    citiesPlaced: 0,\r\n    gameStarted: false\r\n}\r\n\r\nconst calcDistance = (pointA: Coordinates | null , pointB: Coordinates | null) => {\r\n    let distance = null;\r\n\r\n    if (pointA && pointB) {\r\n        distance = googleMapService.computeDistanceBetween(pointA, pointB);\r\n    }\r\n\r\n    return distance;\r\n}\r\n\r\nconst rootReducer = (state: State = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case NEXT_CITY:\r\n            const currentCity = state.capitalCities.shift();\r\n\r\n            return {\r\n                ...state,\r\n                currentCity: currentCity,\r\n                currentMarker: null,\r\n                currentDistance: null\r\n            }\r\n\r\n        case PLACE_MARKER:\r\n            const distance = calcDistance(state.currentCity as Coordinates, action.payload);\r\n            const score = (distance) ? state.score - distance : state.score;\r\n\r\n            return {\r\n                ...state,\r\n                currentMarker: action.payload,\r\n                score: (score < 0) ? 0 : score,\r\n                citiesPlaced: (distance && distance <= 50) ? ++state.citiesPlaced : state.citiesPlaced,\r\n                gameStarted: (score < 0) ? false : true,\r\n                currentDistance: distance\r\n            }\r\n\r\n        case START_GAME:\r\n            return {\r\n                ...initialState,\r\n                capitalCities: cityService.parse(citiesData.capitalCities),\r\n                gameStarted: true\r\n            }\r\n\r\n        case END_GAME:\r\n            return {\r\n                ...initialState,\r\n                gameStarted: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;","import { createStore, Store } from 'redux';\r\nimport rootReducer, { RootState } from \"../reducers\";\r\n\r\nconst store: Store<RootState> = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}